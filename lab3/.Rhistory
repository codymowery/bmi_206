all_trbv = c(nyeso_trbv, unique(mart_vFilt$V_TRB))
other_vFilt = other %>% filter((V_TRB %in% all_trbv) & (V_TRA %in% nyeso_trav))
View(other_vFilt)
mart_vFilt = mart %>% filter((V_TRA %in% nyeso_trav))
library(tidyverse)
nyeso = head(inner_join(
read_tsv('~/github/syntrons/vdjdb/nyeso.tsv') %>% filter(Gene=='TRB'),
read_tsv('~/github/syntrons/vdjdb/nyeso.tsv') %>% filter(Gene=='TRA'),
by = c('complex.id','MHC A','Epitope'), suffix=c('_TRB','_TRA')), 5)
mart = tail(inner_join(
read_tsv('~/github/syntrons/vdjdb/mart1.tsv') %>% filter(Gene=='TRB'),
read_tsv('~/github/syntrons/vdjdb/mart1.tsv') %>% filter(Gene=='TRA'),
by = c('complex.id','MHC A','Epitope'), suffix=c('_TRB','_TRA')), 5)
other = inner_join(
read_tsv('~/github/syntrons/vdjdb/all_A0201.tsv') %>% filter(Gene=='TRB' & !grepl('SLLMWITQV', Epitope) & !grepl('ELAGIGILTV', Epitope)),
read_tsv('~/github/syntrons/vdjdb/all_A0201.tsv') %>% filter(Gene=='TRA'),
by = c('complex.id','MHC A','Epitope'), suffix=c('_TRB','_TRA'))
nyeso_trbv = unique(nyeso$V_TRB)
nyeso_trav = unique(nyeso$V_TRA)
mart_vFilt = mart %>% filter((V_TRA %in% nyeso_trav))
mart = inner_join(
read_tsv('~/github/syntrons/vdjdb/mart1.tsv') %>% filter(Gene=='TRB'),
read_tsv('~/github/syntrons/vdjdb/mart1.tsv') %>% filter(Gene=='TRA'),
by = c('complex.id','MHC A','Epitope'), suffix=c('_TRB','_TRA'))
mart_vFilt = mart %>% filter((V_TRA %in% nyeso_trav))
View(mart_vFilt)
read_tsv('~/github/syntrons/vdjdb/mart1.tsv') %>% filter(Gene=='TRB'),
read_tsv('~/github/syntrons/vdjdb/mart1.tsv') %>% filter(Gene=='TRA'),
by = c('complex.id','MHC A','Epitope'), suffix=c('_TRB','_TRA')) %>%
filter(!is.na(J_TRA))
read_tsv('~/github/syntrons/vdjdb/mart1.tsv') %>% filter(Gene=='TRB'),
read_tsv('~/github/syntrons/vdjdb/mart1.tsv') %>% filter(Gene=='TRA'),
by = c('complex.id','MHC A','Epitope'), suffix=c('_TRB','_TRA')) %>%
filter(!is.na('J_TRA'))
mart = inner_join(
read_tsv('~/github/syntrons/vdjdb/mart1.tsv') %>% filter(Gene=='TRB'),
read_tsv('~/github/syntrons/vdjdb/mart1.tsv') %>% filter(Gene=='TRA' & !is.na(V)),
by = c('complex.id','MHC A','Epitope'), suffix=c('_TRB','_TRA'))
View(mart)
mart_vFilt = mart %>% filter((V_TRA %in% nyeso_trav))
View(mart_vFilt)
mart = inner_join(
read_tsv('~/github/syntrons/vdjdb/mart1.tsv') %>% filter(Gene=='TRB'),
read_tsv('~/github/syntrons/vdjdb/mart1.tsv') %>% filter(Gene=='TRA' & !is.na('V')),
by = c('complex.id','MHC A','Epitope'), suffix=c('_TRB','_TRA'))
mart = inner_join(
read_tsv('~/github/syntrons/vdjdb/mart1.tsv') %>% filter(Gene=='TRB'),
read_tsv('~/github/syntrons/vdjdb/mart1.tsv') %>% filter(Gene=='TRA' & grepl('TRAJ',J)),
by = c('complex.id','MHC A','Epitope'), suffix=c('_TRB','_TRA'))
library(tidyverse)
nyeso = head(inner_join(
read_tsv('~/github/syntrons/vdjdb/nyeso.tsv') %>% filter(Gene=='TRB'),
read_tsv('~/github/syntrons/vdjdb/nyeso.tsv') %>% filter(Gene=='TRA'),
by = c('complex.id','MHC A','Epitope'), suffix=c('_TRB','_TRA')), 5)
mart = inner_join(
read_tsv('~/github/syntrons/vdjdb/mart1.tsv') %>% filter(Gene=='TRB'),
read_tsv('~/github/syntrons/vdjdb/mart1.tsv') %>% filter(Gene=='TRA' & grepl('TRAJ',J)),
by = c('complex.id','MHC A','Epitope'), suffix=c('_TRB','_TRA'))
other = inner_join(
read_tsv('~/github/syntrons/vdjdb/all_A0201.tsv') %>% filter(Gene=='TRB' & !grepl('SLLMWITQV', Epitope) & !grepl('ELAGIGILTV', Epitope)),
read_tsv('~/github/syntrons/vdjdb/all_A0201.tsv') %>% filter(Gene=='TRA'),
by = c('complex.id','MHC A','Epitope'), suffix=c('_TRB','_TRA'))
nyeso_trbv = unique(nyeso$V_TRB)
nyeso_trav = unique(nyeso$V_TRA)
mart_vFilt = mart %>% filter((V_TRA %in% nyeso_trav))
View(mart_vFilt)
length(CASSWGGLSNQPQHF)
length('CASSWGGLSNQPQHF')
nchar('CASSWGGLSNQPQHF')
all_trbv = c(nyeso_trbv, unique(mart_vFilt$V_TRB))
mart_vFilt = mart %>% filter((V_TRA %in% nyeso_trav) &
(nchar(CDR3_TRA < 20)))
nchar('CAARVDMYSGGGADGLTF')
mart_vFilt = mart %>% filter((V_TRA %in% nyeso_trav) &
(nchar(CDR3_TRA <= 15)))
nchar('CAARVDMYSGGGADGLTF')
mart_vFilt = mart %>% filter((V_TRA %in% nyeso_trav) &&
(nchar(CDR3_TRA <= 15)))
mart_vFilt = mart %>% filter((V_TRA %in% nyeso_trav) &
(nchar(CDR3_TRA <= 15)))
mart_vFilt = mart %>% filter((nchar(CDR3_TRA <= 15)) & (V_TRA %in% nyeso_trav))
mart_vFilt = mart %>% filter((V_TRA %in% nyeso_trav)) %>%
group_by(V_TRA) %>% head(.,1)
mart_vFilt = mart %>% filter((V_TRA %in% nyeso_trav)) %>%
group_by('V_TRA') %>% head(.,1)
mart_vFilt = mart %>% filter((V_TRA %in% nyeso_trav)) %>%
top_n(V_TRA, n=1)
mart_vFilt = mart %>% filter((V_TRA %in% nyeso_trav)) %>%
group_by_(~ V_TRA) %>%
slice(1)
mart_vFilt = mart %>% filter((V_TRA %in% nyeso_trav)) %>%
group_by(~ V_TRA) %>%
slice(1)
mart_vFilt = mart %>% filter((V_TRA %in% nyeso_trav)) %>%
group_by(V_TRA) %>%
slice(1)
mart_vFilt = mart %>% filter((V_TRA %in% nyeso_trav)) %>%
group_by(V_TRA) %>%
top_n(1)
mart_vFilt = mart %>% filter((V_TRA %in% nyeso_trav)) %>%
group_by(V_TRA) %>%
top_n(1)
mart_vFilt = mart %>% filter((V_TRA %in% nyeso_trav)) %>%
group_by('J_TRA') %>%
top_n(1)
mart_vFilt = mart %>% filter((V_TRA %in% nyeso_trav)) %>%
group_by(J_TRA) %>%
slice(1)
all_trbv = c(nyeso_trbv, unique(mart_vFilt$V_TRB))
other_vFilt = other %>% filter((V_TRB %in% all_trbv) & (V_TRA %in% nyeso_trav))
unique(nyeso$V_TRB)
unique(mart_vFilt$V_TRB)
unique(nyeso$V_TRA)
unique(mart_vFilt$V_TRA)
other_vFilt = other %>% filter((V_TRA %in% nyeso_trav) &
(V_TRB %in% all_trbv))
other_vFilt = other %>% filter((V_TRA %in% nyeso_trav) &
(V_TRB %in% all_trbv)) %>%
group_by(J_TRA) %>%
slice(1)
other_vFilt = other %>% filter((V_TRA %in% nyeso_trav) &
(V_TRB %in% all_trbv)) %>%
group_by(J_TRA) %>% slice(1) %>% ungroup() %>%
group_by(V_TRA) %>% slice(1) %>% ungroup()
other_vFilt = other %>% filter((V_TRA %in% nyeso_trav) &
(V_TRB %in% all_trbv)) %>%
group_by(J_TRA) %>% slice(1) %>% ungroup() %>%
group_by(V_TRB) %>% slice(1) %>% ungroup()
other_vFilt = other %>% filter((V_TRA %in% nyeso_trav) &
(V_TRB %in% all_trbv)) %>%
group_by(J_TRA) %>% slice(1) %>% ungroup() %>%
group_by(V_TRB, V_TRA) %>% slice(1) %>% ungroup()
other_vFilt = other %>% filter((V_TRA %in% nyeso_trav) &
(V_TRB %in% all_trbv)) %>%
group_by(J_TRA) %>% slice(1) %>% ungroup() %>%
group_by(V_TRB) %>% slice(1) %>% ungroup() %>%
head(5)
nchar(CAYRSARASGAGSYQLTF)
nchar('CAYRSARASGAGSYQLTF')
v1 = bind_rows(nyeso, mart_vFilt, other_vFilt)
View(v1)
colnames(nyeso)
v1 = bind_rows(nyeso, mart_vFilt, other_vFilt) %>%
select("CDR3_TRB","V_TRB","J_TRB","MHC A","CDR3_TRA","V_TRA","J_TRA","Epitope")
v1 = bind_rows(nyeso, mart_vFilt, other_vFilt) %>%
select("Epitope gene_TRB","Epitope","MHC A","CDR3_TRB","V_TRB","J_TRB","CDR3_TRA","V_TRA","J_TRA")
length(unique(v1$V_TRA))
length(unique(v1$V_TRB)) # 5 constructs
write_csv(v1, '~/github/syntrons/vdjdb/filteredTCRlist_v1.csv')
length(unique(v1$V_TRA)) # 5 constructs
length(unique(v1$V_TRB)) # 9 constructs
head = head(infile, 10e3)
library(tidyverse)
## read in introns
infile = read_rds('~/Box/Projects/syntrons/201006-2/201006-2_posSplitReads_fixed.rds')
head = head(infile, 10e3)
## ID introns with homopolymers >= 3 bases
homoPs = grep('[A]{3}|[G]{3}|[C]{3}|[T]{3}', head)
homoPs
head
## ID introns with homopolymers >= 3 bases
homoPs = grep('[A]{3}|[G]{3}|[C]{3}|[T]{3}', head$intron)
homoPs
head[!homoPs,]
head[!grep('[A]{3}|[G]{3}|[C]{3}|[T]{3}', head$intron),]
head[!grepl('[A]{3}|[G]{3}|[C]{3}|[T]{3}', head$intron),]
sub = infile %>% group_by(sample) %>% slice(1e6)
View(sub)
sub = infile %>% group_by(sample) %>% slice(1000000)
View(sub)
sub = infile %>% group_by(sample) %>% slice(1:1000000)
View(sub)
## ID introns with homopolymers >= 3 bases
homoPs = grepl('[A]{3}|[G]{3}|[C]{3}|[T]{3}', sub$intron)
homoPs
head[!homoPs,]
table(homoPs)
homoPs
!homoPs
## Filter to non-homopolymer introns
sub[!homoPs,]
## Filter to non-homopolymer introns
filt = sub[!homoPs,]
table(filt$sample,filt$intron)
table(filt$sample)
filt
dim(filt)
dim(filt$intron)
length(filt$intron)
length(unique(filt$intron))
## ID introns with homopolymers >= 3 bases
homoPs = grepl('[N]{1}|[A]{3}|[G]{3}|[C]{3}|[T]{3}', sub$intron)
table(homoPs)
## Filter to non-homopolymer introns
filt = sub[!homoPs,]
table(filt$sample)
length(filt$intron)
length(unique(filt$intron))
## Filter to non-homopolymer introns
filt = unique(sub[!homoPs,])
table(filt$sample)
length(filt$intron)
length(unique(filt$intron))
filt
overhangs = read_csv('~/github/syntrons/gene_sequences/overhangSets_HamediRadEtAl2019.csv')
colnames(overhangs) = overhangs[1,]
overhangs = overhangs[2:nrow(overhangs),1:6]
fifty = overhangs %>% filter(Size==50) %>% pull(`Set 1`)
fifty = str_split(fifty,',')
fifty
fifty
unlist(fifty)
fifty = unlist(str_split(fifty,','))
fifty
fifty = overhangs %>% filter(Size==50) %>% pull(`Set 1`)
fifty = unlist(str_split(fifty,','))
fifty
library(Biostrings)
## read in introns
infile = read_rds('~/Box/Projects/syntrons/201006-2/201006-2_posSplitReads_fixed.rds') %>%
mutate(fivep = substr(intron, start = 6, stop = 9),
fivep = substr(intron, start = width(intron)-21, stop = width(intron)-17))
## read in introns
infile = read_rds('~/Box/Projects/syntrons/201006-2/201006-2_posSplitReads_fixed.rds') %>%
mutate(fivep = substr(intron, start = 6, stop = 9),
threep = substr(intron, start = width(intron)-21, stop = width(intron)-17))
infile
## read in introns
infile = read_rds('~/Box/Projects/syntrons/201006-2/201006-2_posSplitReads_fixed.rds') %>%
mutate(fivep = substr(intron, start = 6, stop = 9),
threep = substr(intron, start = width(intron)-20, stop = width(intron)-17))
infile
## read in introns
infile = read_rds('~/Box/Projects/syntrons/201006-2/201006-2_posSplitReads_fixed.rds') %>%
mutate(fivep = substr(intron, start = 6, stop = 9),
threep = substr(intron, start = width(intron)-20, stop = width(intron)-17)) %>%
filter((fivep %in% fifty)|(threep %in% fifty))
infile
fifty
which('CTCC',fifty)
in('CTCC',fifty)
'CTCC' %in% fifty
grep('CTCC',fifty)
## read in introns
infile = read_rds('~/Box/Projects/syntrons/201006-2/201006-2_posSplitReads_fixed.rds') %>%
mutate(fivep = substr(intron, start = 6, stop = 9),
fivep_in = fivep %in% fifty,
threep = substr(intron, start = width(intron)-20, stop = width(intron)-17),
threep_in = threep %in% fifty)
infile
## read in introns
infile = read_rds('~/Box/Projects/syntrons/201006-2/201006-2_posSplitReads_fixed.rds') %>%
mutate(fivep = substr(intron, start = 6, stop = 9),
fivep_in = fivep %in% fifty,
threep = substr(intron, start = width(intron)-20, stop = width(intron)-17),
threep_in = threep %in% fifty) %>%
filter((fivep_in==TRUE) | (threep_in==TRUE))
infile
## ID introns with homopolymers >= 3 bases
homoPs = grepl('[N]{1}|[A]{3}|[G]{3}|[C]{3}|[T]{3}', infile$intron)
table(homoPs)
## Filter to non-homopolymer introns
filt = unique(sub[!homoPs,])
## Filter to non-homopolymer introns
filt = unique(infile[!homoPs,])
table(filt$sample)
length(filt$intron)
length(unique(filt$intron))
filt
table(filt$sample, filt$fivep_in)
table(filt$sample, filt$fivep_in, filt$threep_in)
table(filt$fivep_in, filt$threep_in)
length(filt$intron)
length(unique(filt$intron))
filt
adist((filt %>% filter(fivep==TRUE & threep==TRUE))$intron)
filt %>% filter(fivep==TRUE & threep==TRUE)
adist((filt %>% filter(fivep_in==TRUE & threep_in==TRUE))$intron)
heatmap(adist((filt %>% filter(fivep_in==TRUE & threep_in==TRUE))$intron))
write_rds(filt, '~/Box/Projects/syntrons/201006-2/201006-2_pos_filtHomoPs_filtOverhangs.rds')
#load packages
library(regioneR)
set.seed(10)
setwd('~/github/bmi_206/lab3/')
#read in BED formatted region files: all tested regions and two sets of positives
# these are in hg19 human genome assembly coordinates
all=toGRanges(read.table("all.bed",sep="\t"))
hits1=toGRanges(read.table("hits1.bed",sep="\t"))
hits2=toGRanges(read.table("hits2.bed",sep="\t"))
#Q1. How many regions are in hits1? How many in hits2?
length(hits1) ## 140
length(hits2) ## 322
#Q2. Are hits1 and hits2 proper subsets of all the tested regions?
#    Check how many of each set overlaps a region in all.
hits1xall = overlapRegions(hits1, all)
overlapGraphicalSummary(hits1, all, regions.labels=c('hits1', 'all'))
par("mar")
par(mar=c(1,1,1,1))
overlapGraphicalSummary(hits1, all, regions.labels=c('hits1', 'all'))
dev.off()
overlapGraphicalSummary(hits1, all, regions.labels=c('hits1', 'all'))
graphics.off() par("mar") par(mar=c(1,1,1,1))
graphics.off()
par("mar")
par(mar=c(1,1,1,1))
overlapGraphicalSummary(hits1, all, regions.labels=c('hits1', 'all'))
#load packages
library(regioneR)
set.seed(10)
setwd('~/github/bmi_206/lab3/')
#read in BED formatted region files: all tested regions and two sets of positives
# these are in hg19 human genome assembly coordinates
all=toGRanges(read.table("all.bed",sep="\t"))
hits1=toGRanges(read.table("hits1.bed",sep="\t"))
hits2=toGRanges(read.table("hits2.bed",sep="\t"))
#Q1. How many regions are in hits1? How many in hits2?
length(hits1) ## 140
length(hits2) ## 322
overlapRegions(hits1, all)
#Q2. Are hits1 and hits2 proper subsets of all the tested regions?
#    Check how many of each set overlaps a region in all.
hits1xall = overlapRegions(hits1, all)
#Q2. Are hits1 and hits2 proper subsets of all the tested regions?
#    Check how many of each set overlaps a region in all.
hits1xall = overlapRegions(hits1, all)
table(hits1xall$type)
overlapGraphicalSummary(hits1, all, regions.labels=c('hits1', 'all'))
## Looks like every hits1 region is in all (equal=140), but there's an additional region in all that's inside a hits1 region (BinA)
hits2xall = x
overlapRegions(hits2, all)
table(hits2xall$type)
## Looks like every hits1 region is in all (equal=140), but there's an additional region in all that's inside a hits1 region (BinA)
hits2xall = overlapRegions(hits2, all)
dim(hits2xall)
table(hits2xall$type)
overlapGraphicalSummary(hits2, all, regions.labels=c('hits1', 'all'))
overlapGraphicalSummary(hits2, all, regions.labels=c('hits2', 'all'))
overlapRegions(hits1, hits2)
#The next few questions explore the overlap of genomic regions in hits1 and hits2.
hitsxhits = overlapRegions(hits1, hits2)
hitsxhits
overlapGraphicalSummary(hits1, hits2, regions.labels=c('hits1', 'hits2'))
suppressWarnings(overlapRegions(hits1, hits2))
#The next few questions explore the overlap of genomic regions in hits1 and hits2.
hitsxhits = suppressWarnings(overlapRegions(hits1, hits2))
overlapGraphicalSummary(hits1, hits2, regions.labels=c('hits1', 'hits2'))
mean(width(hits1)
)
width(hits1)
hits1
10781239-10781744
createRandomRegions(nregions = length(hits1),
length.mean = mean(width(hits1)),
length.sd = sd(width(hits1)))
createRandomRegions(nregions = length(hits1),
length.mean = mean(width(hits1)),
length.sd = sd(width(hits1)),
genome = all)
#Q4. Generate a set of random genomic regions of the same size as hits1.
random = createRandomRegions(nregions = length(hits1),
length.mean = mean(width(hits1)),
length.sd = sd(width(hits1)),
genome = all)
overlapRegions(random, all)
overlapRegions(random, all)
#    Do the random genomic regions overlap hits2 more or less than hits1 does?
overlapRegions(random, hits2)
overlapRegions(random, all)
all
#    Do the random genomic regions overlap hits2 more or less than hits1 does?
overlapRegions(random, hits2)
## None of the randomly generated regions overlap with all
#    Do the random genomic regions overlap hits2 more or less than hits1 does?
overlapRegions(random, hits2)
??permTest
permTest(A=random, B=hits1, ntimes=10)
permTest(A=random, B=hits1, ntimes=10, randomize.function = createRandomRegions())
permTest(A=random, B=hits1, ntimes=10, randomize.function = createRandomRegions(length.mean = mean(width(hits1)),
length.sd = sd(width(hits1)),
genome = all))
permTest(A=random, B=hits1, ntimes=10, randomize.function = createRandomRegions(length.mean = mean(width(B)),
length.sd = sd(width(B)),
genome = all))
permTest(A=random, B=hits1, ntimes=10, randomize.function = createRandomRegions())
source('~/github/bmi_206/lab3/enrichment_CMowery.R', echo=TRUE)
#    Repeatedly generate genomic regions to compute a z-score for the overlap of hits1 with hits2
#     Use the set of overlaps with random regions to test the null hypothesis
#     that hits2 overlaps hits1 more than expected compared to totally random regions
pt = permTest(A=random, B=hits1, ntimes=10, randomize.function = createRandomRegions(genome=all))
#    Repeatedly generate genomic regions to compute a z-score for the overlap of hits1 with hits2
#     Use the set of overlaps with random regions to test the null hypothesis
#     that hits2 overlaps hits1 more than expected compared to totally random regions
pt = permTest(A=random, B=hits1, ntimes=10, randomize.function = createRandomRegions(genome=all))
pt
#    Repeatedly generate genomic regions to compute a z-score for the overlap of hits1 with hits2
#     Use the set of overlaps with random regions to test the null hypothesis
#     that hits2 overlaps hits1 more than expected compared to totally random regions
pt = permTest(A=random, B=hits1, ntimes=10, randomize.function = createRandomRegions)
pt
#    Repeatedly generate genomic regions to compute a z-score for the overlap of hits1 with hits2
#     Use the set of overlaps with random regions to test the null hypothesis
#     that hits2 overlaps hits1 more than expected compared to totally random regions
pt = permTest(A=random, B=hits1, ntimes=10, randomize.function = createRandomRegions, evaluate.function = overlapRegions)
overlapPermTest(A=random, B=hits1, ntimes=10)
#    Repeatedly generate genomic regions to compute a z-score for the overlap of hits1 with hits2
#     Use the set of overlaps with random regions to test the null hypothesis
#     that hits2 overlaps hits1 more than expected compared to totally random regions
pt = permTest(A=random, B=hits1, ntimes=10, randomize.function = createRandomRegions, evaluate.function = meanDistance
)
#    Repeatedly generate genomic regions to compute a z-score for the overlap of hits1 with hits2
#     Use the set of overlaps with random regions to test the null hypothesis
#     that hits2 overlaps hits1 more than expected compared to totally random regions
pt = permTest(A=random, B=hits1, ntimes=10, randomize.function = createRandomRegions, evaluate.function = meanDistance)
pt
#    Repeatedly generate genomic regions to compute a z-score for the overlap of hits1 with hits2
#     Use the set of overlaps with random regions to test the null hypothesis
#     that hits2 overlaps hits1 more than expected compared to totally random regions
pt = permTest(A=random, B=hits1, ntimes=10, randomize.function = createRandomRegions, evaluate.function = numOverlaps)
pt
#    Repeatedly generate genomic regions to compute a z-score for the overlap of hits1 with hits2
#     Use the set of overlaps with random regions to test the null hypothesis
#     that hits2 overlaps hits1 more than expected compared to totally random regions
pt1 = permTest(A=random, B=hits1, ntimes=10, randomize.function = createRandomRegions, evaluate.function = numOverlaps)
permTest(A=random, B=hits1, ntimes=100, randomize.function = createRandomRegions, evaluate.function = numOverlaps)
permTest(A=hits1, B=hits2, ntimes=100, randomize.function = createRandomRegions, evaluate.function = numOverlaps)
pt1 = permTest(A=hits1, B=hits2, ntimes=100, randomize.function = createRandomRegions, evaluate.function = numOverlaps, universe = all)
pt1
permTest(A=hits1, B=hits2, ntimes=100, randomize.function = createRandomRegions, evaluate.function = numOverlaps, universe = all)
#    Repeatedly generate genomic regions to compute a z-score for the overlap of hits1 with hits2
#     Use the set of overlaps with random regions to test the null hypothesis
#     that hits2 overlaps hits1 more than expected compared to totally random regions
pt1 = suppressWarnings(permTest(A=hits1, B=hits2, ntimes=100, randomize.function = createRandomRegions, evaluate.function = numOverlaps, universe = all))
#    Repeatedly generate genomic regions to compute a z-score for the overlap of hits1 with hits2
#     Use the set of overlaps with random regions to test the null hypothesis
#     that hits2 overlaps hits1 more than expected compared to totally random regions
pt1 = suppressWarnings(permTest(A=hits1, B=hits2, ntimes=100, randomize.function = createRandomRegions, evaluate.function = numOverlaps, universe = all, alt == "auto"))
#    Repeatedly generate genomic regions to compute a z-score for the overlap of hits1 with hits2
#     Use the set of overlaps with random regions to test the null hypothesis
#     that hits2 overlaps hits1 more than expected compared to totally random regions
pt1 = suppressWarnings(permTest(A=hits1, B=hits2, ntimes=100, randomize.function = createRandomRegions, evaluate.function = numOverlaps, universe = all, alternative == "auto"))
#    Repeatedly generate genomic regions to compute a z-score for the overlap of hits1 with hits2
#     Use the set of overlaps with random regions to test the null hypothesis
#     that hits2 overlaps hits1 more than expected compared to totally random regions
pt1 = suppressWarnings(permTest(A=hits1, B=hits2, ntimes=100, randomize.function = createRandomRegions, evaluate.function = numOverlaps, universe = all, alternative = "auto"))
suppressWarnings(permTest(A=hits1, B=hits2, ntimes=100, randomize.function = createRandomRegions, evaluate.function = numOverlaps, universe = all, alternative = "auto"))
#    Repeatedly generate genomic regions to compute a z-score for the overlap of hits1 with hits2
#     Use the set of overlaps with random regions to test the null hypothesis
#     that hits2 overlaps hits1 more than expected compared to totally random regions
pt1 = suppressWarnings(regioneR::permTest(A=hits1, B=hits2, ntimes=100, randomize.function = createRandomRegions, evaluate.function = numOverlaps, universe = all, alternative = "auto"))
#    Repeatedly generate genomic regions to compute a z-score for the overlap of hits1 with hits2
#     Use the set of overlaps with random regions to test the null hypothesis
#     that hits2 overlaps hits1 more than expected compared to totally random regions
pt1 = suppressWarnings(permTest(A=hits1, B=hits2, ntimes=100, randomize.function = createRandomRegions, evaluate.function = numOverlaps, universe = all,
force.parallel = FALSE))
#    Repeatedly generate genomic regions to compute a z-score for the overlap of hits1 with hits2
#     Use the set of overlaps with random regions to test the null hypothesis
#     that hits2 overlaps hits1 more than expected compared to totally random regions
pt1 = suppressWarnings(permTest(A=hits1, B=hits2, ntimes=100, randomize.function = createRandomRegions, evaluate.function = numOverlaps, universe = all,
force.parallel = TRUE))
genome <- filterChromosomes(getGenome("hg19"), keep.chr="chr1")
A <- createRandomRegions(nregions=20, length.mean=10000000, length.sd=20000, genome=genome, non.overlapping=FALSE)
B <- c(A, createRandomRegions(nregions=10, length.mean=10000, length.sd=20000, genome=genome, non.overlapping=FALSE))
pt2 <- permTest(A=A, B=B, ntimes=10, alternative="auto", verbose=TRUE, genome=genome, evaluate.function=meanDistance, randomize.function=randomizeRegions, non.overlapping=FALSE)
summary(pt2)
plot(pt2)
plot(pt2, plotType="Tailed")
library(BSgenome.Hsapiens.UCSC.hg19)
BiocManager::install('BSgenome.Hsapiens.UCSC.hg19')
## None of the randomly generated regions overlap with all
randomize = function(x){createRandomRegions(genome = all)}
suppressWarnings(permTest(A=hits1, B=hits2, ntimes=100, randomize.function = randomize, evaluate.function = numOverlaps, universe = all,
force.parallel = FALSE))
genome <- filterChromosomes(getGenome("hg19"), keep.chr="chr1")
library(BSgenome.Hsapiens.UCSC.hg19)
library(BiocManager)
install("BSgenome.Hsapiens.UCSC.hg19")
#Q4. Generate a set of random genomic regions of the same size as hits1.
#     Match these to the mean and sd of the genomic length of the hits1 regions.
random = createRandomRegions(nregions = length(hits1),
length.mean = mean(width(hits1)),
length.sd = sd(width(hits1)),
genome = 'hg19')
install("BSgenome.Hsapiens.UCSC.hg19")
library("BSgenome.Hsapiens.UCSC.hg19")
library(BSgenome.Hsapiens.UCSC.hg19)
#Q4. Generate a set of random genomic regions of the same size as hits1.
#     Match these to the mean and sd of the genomic length of the hits1 regions.
random = createRandomRegions(nregions = length(hits1),
length.mean = mean(width(hits1)),
length.sd = sd(width(hits1)),
genome = 'hg19')
library(BiocManager)
dev.off()
library(BiocManager)
install("BSgenome.Hsapiens.UCSC.hg19")
BiocManager::install('BSgenome.Hsapiens.UCSC.hg19')
library("BSgenome.Hsapiens.UCSC.hg19")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BSgenome.Hsapiens.UCSC.hg19")
install.packages("KernSmooth")
BiocManager::install(‘KernSmooth’)
BiocManager::install('KernSmooth')
library(BSgenome.Hsapiens.UCSC.hg38)
library('BSgenome.Hsapiens.UCSC.hg38')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BSgenome.Hsapiens.UCSC.hg19")
install.packages("path/to/BSgenome.Hsapiens.UCSC.hg19_1.4.0.tar.gz", repos = NULL, type = "source")
install.packages("https://bioconductor.org/packages/3.11/data/annotation/src/contrib/BSgenome.Hsapiens.UCSC.hg19_1.4.0.tar.gz", repos = NULL, type = "source")
install.packages("https://bioconductor.org/packages/3.11/data/annotation/src/contrib/BSgenome.Hsapiens.UCSC.hg19_1.4.0.tar.gz", repos = NULL, type = "source")
BiocManager::install("BSgenome.Hsapiens.UCSC.hg19", INSTALL_opts = "--no-staged-install")
