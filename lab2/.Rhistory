other_vFilt = other %>% filter((V_TRA %in% nyeso_trav) &
(V_TRB %in% all_trbv)) %>%
group_by(J_TRA) %>% slice(1) %>% ungroup() %>%
group_by(V_TRA) %>% slice(1) %>% ungroup()
other_vFilt = other %>% filter((V_TRA %in% nyeso_trav) &
(V_TRB %in% all_trbv)) %>%
group_by(J_TRA) %>% slice(1) %>% ungroup() %>%
group_by(V_TRB) %>% slice(1) %>% ungroup()
other_vFilt = other %>% filter((V_TRA %in% nyeso_trav) &
(V_TRB %in% all_trbv)) %>%
group_by(J_TRA) %>% slice(1) %>% ungroup() %>%
group_by(V_TRB, V_TRA) %>% slice(1) %>% ungroup()
other_vFilt = other %>% filter((V_TRA %in% nyeso_trav) &
(V_TRB %in% all_trbv)) %>%
group_by(J_TRA) %>% slice(1) %>% ungroup() %>%
group_by(V_TRB) %>% slice(1) %>% ungroup() %>%
head(5)
nchar(CAYRSARASGAGSYQLTF)
nchar('CAYRSARASGAGSYQLTF')
v1 = bind_rows(nyeso, mart_vFilt, other_vFilt)
View(v1)
colnames(nyeso)
v1 = bind_rows(nyeso, mart_vFilt, other_vFilt) %>%
select("CDR3_TRB","V_TRB","J_TRB","MHC A","CDR3_TRA","V_TRA","J_TRA","Epitope")
v1 = bind_rows(nyeso, mart_vFilt, other_vFilt) %>%
select("Epitope gene_TRB","Epitope","MHC A","CDR3_TRB","V_TRB","J_TRB","CDR3_TRA","V_TRA","J_TRA")
length(unique(v1$V_TRA))
length(unique(v1$V_TRB)) # 5 constructs
write_csv(v1, '~/github/syntrons/vdjdb/filteredTCRlist_v1.csv')
length(unique(v1$V_TRA)) # 5 constructs
length(unique(v1$V_TRB)) # 9 constructs
setwd('~/github/bmi_206/lab2/')
#Read in the genotype and phenotype matrices
genos = as.matrix(read.table("./genos.txt"))
phenos = as.matrix(read.table("./phenos.txt"))
#Make a histogram of the phenotypes. Do they look normally distributed?
hist(phenos)
#How are the genotypes encoded?
table(genos)
phenos
#How many individuals are there in the data set and how many SNPs?
dim(genos)
dim(phenos)
N = 10000 ## There are 10k genotypes
M = 1500 ## There are 1500 SNPs
genos
phenos
M = 10000 ## There are 10k SNPs
N = 1500 ## There are 1500 individuals
M = 10000 ## There are 10k SNPs
#Compute the *minor* allele frequency of every SNP
MAFs = array(0,M)
genos
head(genos)
head(phenos)
dim(phenos)
#How many individuals are there in the data set and how many SNPs?
dim(genos)
#How are the genotypes encoded?
table(genos)
genos[1]
genos[,1]
#Compute the *minor* allele frequency of every SNP
MAFs = array(0,M)
for(i in 1:M) {
af = sum(genos[,i])/N
MAFs[i] = ifelse(af>0.5, af, 1-af)
}
MAFs
af
for(i in 1:M) {
af = sum(genos[,i])/(N*2)
MAFs[i] = ifelse(af>0.5, af, 1-af)
}
MAFs
#Compute the *minor* allele frequency of every SNP
MAFs = array(0,M)
for(i in 1:M) {
af = sum(genos[,i])/(N*2)
MAFs[i] = ifelse(af<0.5, af, 1-af)
}
MAFs
for(i in 1:M) {
af = sum(genos[,i])/(N*2)
MAFs[i] = min(af, 1-af)
}
MAFs
#Run a GWAS on the data under an additive model and save the p-values, z-scores, and effect sizes
pvalues = array(0,M)
zscores = array(0,M)
betas = array(0,M)
genos[,i]
g=genos[,i]
lm(phenos ~ g)
summary(lm(phenos ~ g))
res = lm(phenos ~ g)
res
summary(res)
test = summary(res)
test$fstatistic
test$coefficients
test$coefficients[3]
test$coefficients[,43]
test$coefficients[,4]
test$coefficients[,4][1]
lm.beta()
coef(res)
pvalues[i] = coef(res, complete = T)
coef(res, complete = T)
coef(ref)
coef(res)
coef(res)[2]
coef(res)[4]
coef(res)[3]
summary(res)$coefficients[,4]
summary(res)$coef[2,3]
summary(res)$coef[2,4]
summary(res)$coefficients[2,4]
summary(res)$coefficients[2,1]
summary(res)$coef[2,3]
cor(g, phenos) * sqrt(N)
summary(res)$coefficients[2,1]
for(i in 1:M) {
g = genos[,i]
res = lm(phenos ~ g)
zscores[i] = cor(g, phenos) * sqrt(N) ## Calculate Z-scores as we did in live coding session,
pvalues[i] = summary(res)$coefficients[2,4] ## Extract p-value from lm() output
betas[i] = summary(res)$coefficients[2,1] ## Extract beta coefficient from lm() output
}
#Draw a QQ plot for log10(p) values
obsLogPvs = sort(-log10(pvalues))
expLogPvs = sort(-log10(seq(1/M,1,1/M)))
plot(expLogPvs,obsLogPvs,main='QQ plot')
abline( a=0, b=1 )
#Compute the chi2 test statistics
chis = zscores^2
#Is there inflation?
lambdaGC = median(chis)/0.454 # why .454?
abline( a=0, b=lambdaGC, col=2 )
median(rnorm(10000000)^2)
zscores
dim(phenos)
N = 1500 ## There are 1500 individuals
#How many individuals are there in the data set and how many SNPs?
dim(genos)
#Are there any signficantly associated SNPs? If so, which SNPs are they?
assoc = which(pvalues<(0.5/M))
#Are there any signficantly associated SNPs? If so, which SNPs are they?
assoc = which(pvalues<(0.5/M))
#Build a linear predictor of the phenotype using these associated SNPs.
ypred = array(0,N)
#Build a linear predictor of the phenotype using these associated SNPs.
ypred = array(0,N)
for(i in 1:N) {
ypred[i] = genos[i,assoc] %*% betas[assoc]
}
plot(ypred,phenos)
#What is the correlation between the predicted phenotype and the true phenotype
cor(ypred,phenos)
#Test each of the associated SNPs for non-linearity.
hp = array(0,length(assoc))
res$Pr
#Test each of the associated SNPs for non-linearity.
hp = array(0,length(assoc))
for (i in 1:length(assoc)) {
g = genos[,assoc[i]]
h = g
h[h==2]=0
#Hint: can use anova(lm(?),lm(?)) or summary(lm(?))
hp[i] <- summary(lm(phenos~g+h))$Pr[2]
}
summary(lm(phenos~g+h))
for (i in 1:length(assoc)) {
g = genos[,assoc[i]]
h = g
h[h==2]=0
#Hint: can use anova(lm(?),lm(?)) or summary(lm(?))
hp[i] <- summary(lm(phenos~g+h))$coefficients[2,4]
}
hp
#Visualize a linear SNP and a non-linear SNP
par( mfrow=c(1,2) )
genos[,assoc[1]]
#Visualize a linear SNP and a non-linear SNP
par( mfrow=c(1,2) )
plot( genos[,assoc[1]], phenos )
points( c(0,1,2), tapply( phenos, genos[,assoc[1]], mean ), col=2, pch=16, cex=3 )
lines( c(0,1,2), tapply( phenos, genos[,assoc[1]], mean ), col=2, lwd=2  )
plot( genos[,assoc[2]], phenos )
points( c(0,1,2), tapply( phenos, genos[,assoc[2]], mean ), col=2, pch=16, cex=3 )
lines( c(0,1,2), tapply( phenos, genos[,assoc[2]], mean ), col=2, lwd=2  )
#Visualize a linear SNP and a non-linear SNP
par( mfrow=c(1,2) )
plot( genos[,assoc[1]], phenos )
points( c(0,1,2), tapply( phenos, genos[,assoc[1]], mean ), col=2, pch=16, cex=3 )
lines( c(0,1,2), tapply( phenos, genos[,assoc[1]], mean ), col=2, lwd=2  )
plot( genos[,assoc[2]], phenos )
points( c(0,1,2), tapply( phenos, genos[,assoc[2]], mean ), col=2, pch=16, cex=3 )
lines( c(0,1,2), tapply( phenos, genos[,assoc[2]], mean ), col=2, lwd=2  )
hp
plot(genos[,assoc[3]],phenos)
points(c(0,1,2),tapply(phenos,genos[,assoc[1]],mean),col=2,pch=16,cex=3)
lines(c(0,1,2),tapply(phenos,genos[,assoc[1]],mean),col=2,lwd=2)
plot(genos[,assoc[3]],phenos)
points(c(0,1,2),tapply(phenos,genos[,assoc[3]],mean),col=2,pch=16,cex=3)
#Visualize a linear SNP and a non-linear SNP
par( mfrow=c(1,2) )
plot(genos[,assoc[3]],phenos)
points(c(0,1,2),tapply(phenos,genos[,assoc[3]],mean),col=2,pch=16,cex=3)
lines(c(0,1,2),tapply(phenos,genos[,assoc[3]],mean),col=2,lwd=2)
plot(genos[,assoc[2]],phenos)
points(c(0,1,2),tapply(phenos,genos[,assoc[2]],mean),col=2,pch=16,cex=3)
lines(c(0,1,2),tapply(phenos,genos[,assoc[2]],mean),col=2,lwd=2)
plot(genos[,assoc[1]],phenos)
points(c(0,1,2),tapply(phenos,genos[,assoc[1]],mean),col=2,pch=16,cex=3)
lines(c(0,1,2),tapply(phenos,genos[,assoc[1]],mean),col=2,lwd=2)
plot(genos[,assoc[2]],phenos)
points(c(0,1,2),tapply(phenos,genos[,assoc[2]],mean),col=2,pch=16,cex=3)
lines(c(0,1,2),tapply(phenos,genos[,assoc[2]],mean),col=2,lwd=2)
assoc
which(pvalues<(0.5/M))
par( mfrow=c(1,10) )
for(i in 1:10){
plot(genos[,assoc[i]],phenos)
points(c(0,1,2),tapply(phenos,genos[,assoc[i]],mean),col=2,pch=16,cex=3)
lines(c(0,1,2),tapply(phenos,genos[,assoc[i]],mean),col=2,lwd=2)
}
par( mfrow=c(1,10) )
for(i in 1:3){
plot(genos[,assoc[i]],phenos)
points(c(0,1,2),tapply(phenos,genos[,assoc[i]],mean),col=2,pch=16,cex=3)
lines(c(0,1,2),tapply(phenos,genos[,assoc[i]],mean),col=2,lwd=2)
}
par( mfrow=c(5,2) )
for(i in 1:10){
plot(genos[,assoc[i]],phenos)
points(c(0,1,2),tapply(phenos,genos[,assoc[i]],mean),col=2,pch=16,cex=3)
lines(c(0,1,2),tapply(phenos,genos[,assoc[i]],mean),col=2,lwd=2)
}
par( mfrow=c(5,2) )
for(i in 1:10){
plot(genos[,assoc[i]],phenos)
points(c(0,1,2),tapply(phenos,genos[,assoc[i]],mean),col=2,pch=16,cex=3)
lines(c(0,1,2),tapply(phenos,genos[,assoc[i]],mean),col=2,lwd=2)
}
dev.off()
hp
#Test each of the associated SNPs for non-linearity.
hp = array(0,length(assoc))
for (i in 1:length(assoc)) {
g = genos[,assoc[i]]
h = g
h[h==2]=0
#Hint: can use anova(lm(?),lm(?)) or summary(lm(?))
# hp[i] <- summary(lm(phenos~g+h))$coefficients[2,4]
hp[i] = anova( lm(phenos~g+h), lm(phenos~g) )$Pr[2]
}
hp
#Test each of the associated SNPs for non-linearity.
hp = array(0,length(assoc))
for (i in 1:length(assoc)) {
g = genos[,assoc[i]]
h = g
h[h==2]=0
#Hint: can use anova(lm(?),lm(?)) or summary(lm(?))
hp[i] <- summary(lm(phenos~g+h))$coefficients[2,4]
# hp[i] = anova( lm(phenos~g+h), lm(phenos~g) )$Pr[2]
}
hp
summary(lm(phenos~g+h))
summary(lm(phenos~g+h))$coefficients[2,4]
summary(lm(phenos~g+h))$coefficients[3,4]
#Test each of the associated SNPs for non-linearity.
hp = array(0,length(assoc))
for (i in 1:length(assoc)) {
g = genos[,assoc[i]]
h = g
h[h==2]=0
#Hint: can use anova(lm(?),lm(?)) or summary(lm(?))
hp[i] <- summary(lm(phenos~g+h))$coefficients[3,4]
}
hp
is_lin = hp < 0.05
is_lin
lin = min(which(is_lin==TRUE))
lin
not_lin = min(which(is_lin==FALSE))
not_lin
#Visualize a linear SNP and a non-linear SNP
par( mfrow=c(1,2) )
plot(genos[,assoc[lin]], phenos)
points( c(0,1,2), tapply(genos[,assoc[lin]], phenos, mean ), col=2, pch=16, cex=3 )
points( c(0,1,2), tapply(phenos, genos[,assoc[lin]], mean ), col=2, pch=16, cex=3 )
lines( c(0,1,2), tapply(phenos, genos[,assoc[lin]], mean ), col=2, lwd=2  )
plot(genos[,assoc[non_lin]], phenos)
points( c(0,1,2), tapply(phenos, genos[,assoc[non_lin]], mean ), col=2, pch=16, cex=3 )
non_lines( c(0,1,2), tapply(phenos, genos[,assoc[non_lin]], mean ), col=2, lwd=2  )
plot(genos[,assoc[not_lin]], phenos)
points( c(0,1,2), tapply(phenos, genos[,assoc[not_lin]], mean ), col=2, pch=16, cex=3 )
not_lines( c(0,1,2), tapply(phenos, genos[,assoc[not_lin]], mean ), col=2, lwd=2  )
lines( c(0,1,2), tapply(phenos, genos[,assoc[not_lin]], mean ), col=2, lwd=2  )
par( mfrow=c(1,2) )
plot(genos[,assoc[lin]], phenos)
points( c(0,1,2), tapply(phenos, genos[,assoc[lin]], mean ), col=2, pch=16, cex=3 )
lines( c(0,1,2), tapply(phenos, genos[,assoc[lin]], mean ), col=2, lwd=2  )
plot(genos[,assoc[not_lin]], phenos)
points( c(0,1,2), tapply(phenos, genos[,assoc[not_lin]], mean ), col=2, pch=16, cex=3 )
lines( c(0,1,2), tapply(phenos, genos[,assoc[not_lin]], mean ), col=2, lwd=2  )
N = 1000 #number of individuals
M = 30   #number of non-causal SNPs
gs = matrix(0,nrow=N,ncol=M)
MAF = .5
gC = rbinom(N,1,MAF) #causal variant
MAF = 0.5 #minor allele frequency of all SNPs
set.seed = (42) #set random seed so we all get the same numbers
#Generate 10 tight LD partners
rho = 0.9
for(i in 1:10) {
idx = rbinom(N,1,rho)
gs[,i]=gC*idx+rbinom(N,1,MAF)*(1-idx)
# test they have the right LD empirically
cat( 'Observed LD = ', cor( gs[,i], gC ), '\n' )
# Bonus: prove they have the right LD theoretically
}
#Do the same for 10 moderate LD partners (rho=0.6)
rho = 0.6
for(i in 1:10) {
idx = rbinom(N,1,rho)
gs[,i]=gC*idx+rbinom(N,1,MAF)*(1-idx)
# test they have the right LD empirically
cat( 'Observed LD = ', cor( gs[,i], gC ), '\n' )
# Bonus: prove they have the right LD theoretically
}
#Do the same for 10 independent SNPs (rho=0)
rho = 0
for(i in 1:10) {
idx = rbinom(N,1,rho)
gs[,i]=gC*idx+rbinom(N,1,MAF)*(1-idx)
# test they have the right LD empirically
cat( 'Observed LD = ', cor( gs[,i], gC ), '\n' )
# Bonus: prove they have the right LD theoretically
}
beta = 0.3
pheno = gC*beta + rnorm(N)
zsC = summary(lm(pheno~gC))$coef[2,3]
zs = sapply( 1:M, function(i) summary(lm(pheno~gs[,i]))$coef[2,3] )
rbinom(N,1,MAF)
rbinom(N,1,rho)
#Do the same for 10 independent SNPs (rho=0)
rho = 0
for(i in 1:10) {
idx = rbinom(N,1,rho)
gs[,i]=gC*idx+rbinom(N,1,MAF)*(1-idx)
# test they have the right LD empirically
cat( 'Observed LD = ', cor( gs[,i], gC ), '\n' )
# Bonus: prove they have the right LD theoretically
}
beta = 0.3
pheno = gC*beta + rnorm(N)
zsC = summary(lm(pheno~gC))$coef[2,3]
zsC
zs = sapply( 1:M, function(i) summary(lm(pheno~gs[,i]))$coef[2,3] )
gs
M
sapply( 1:M, function(i) print(i))
summary(lm(pheno~gs[,i]))$coef[2,3]
summary(lm(pheno~gs[,1]))$coef[2,3]
zs = sapply( 1:M, function(i) summary(lm(pheno~gs[,i]))$coef[2,3] )
N = 1000 #number of individuals
M = 30   #number of non-causal SNPs
gs = matrix(0,nrow=N,ncol=M)
MAF = .5
gC = rbinom(N,1,MAF) #causal variant
MAF = 0.5 #minor allele frequency of all SNPs
set.seed = (42) #set random seed so we all get the same numbers
#Generate 10 tight LD partners
rho = 0.9
for(i in 1:10) {
idx = rbinom(N,1,rho)
gs[,i]=gC*idx+rbinom(N,1,MAF)*(1-idx)
# test they have the right LD empirically
cat( 'Observed LD = ', cor( gs[,i], gC ), '\n' )
# Bonus: prove they have the right LD theoretically
}
#Do the same for 10 moderate LD partners (rho=0.6)
rho = 0.6
for(i in 11:20) {
idx = rbinom(N,1,rho)
gs[,i]=gC*idx+rbinom(N,1,MAF)*(1-idx)
# test they have the right LD empirically
cat( 'Observed LD = ', cor( gs[,i], gC ), '\n' )
# Bonus: prove they have the right LD theoretically
}
#Do the same for 10 independent SNPs (rho=0)
rho = 0
for(i in 21:30) {
idx = rbinom(N,1,rho)
gs[,i]=gC*idx+rbinom(N,1,MAF)*(1-idx)
# test they have the right LD empirically
cat( 'Observed LD = ', cor( gs[,i], gC ), '\n' )
# Bonus: prove they have the right LD theoretically
}
gs
beta = 0.3
pheno = gC*beta + rnorm(N)
zsC = summary(lm(pheno~gC))$coef[2,3]
zs = sapply( 1:M, function(i) summary(lm(pheno~gs[,i]))$coef[2,3] )
zs
#Visualize the relationship between the mean z-scores at the tag SNPs and the z-score at the causal SNP
par( mfrow=c(2,2) )
breaks = hist(c(0,zsC,zs),plot=F)$breaks
breaks
hist(zs[1:10],breaks=breaks, col=1, main='LD partners')
abline(v=zsC)
hist(zs[11:20],breaks=breaks, col=2, main='Low-LD partner SNPs')
abline(vzsC)
abline(v=zsC)
hist(zs[21:30],breaks=breaks, col=3, main='Independent SNPs')
abline(v=zsC)
#What is the empirical LD between all pairs of SNPs including the causal SNP?
lds = cor(cbind(gs,gc))
#What is the empirical LD between all pairs of SNPs including the causal SNP?
lds = cor(cbind(gs,gC))
rbinom(N,1,MAF)
lds
#BONUS: LD score regression
#Calculate the LD scores. There should be M+1 of them
ldscores = sapply(1:(M+1), function(m) sum(lds[m,]^2))
ldscores
#BONUS: LD score regression
#Calculate the LD scores. There should be M+1 of them
ldscores = sapply(1:(M+1), function(m) sum(lds[m,]^2))
ldscores
#Visualize LD score regression
plot( ldscores, c( zsC, zs )^2, ylab=expression(chi^2) )
#Use LD score regression to test for inflation and to estimate heritability
lambdaGC = median(chis)/0.454 # why .454?
summary( lm( c(zsC,zs)^2 - 1 ~ ldscores ) )$coef[2,1] * M/N
#~0.06, 0.03
#What is the true heritability?
var(gC*beta ) / var(pheno)
plot(expLogPvs,obsLogPvs,main='QQ plot')
abline( a=0, b=1 )
## I'm a little confused by the 0.454
## Googling (http://genometoolbox.blogspot.com/2014/08/how-to-calculate-genomic-inflation.html) gives me qchisq(0.5,1) = 0.454
## So it's just the expected median of chi2 values? and we look for deviation from that distribution?
abline( a=0, b=lambdaGC, col=2 )
plot(ypred,phenos)
#Visualize a linear SNP and a non-linear SNP
par( mfrow=c(1,2) )
plot(genos[,assoc[lin]], phenos)
points( c(0,1,2), tapply(phenos, genos[,assoc[lin]], mean ), col=2, pch=16, cex=3 )
lines( c(0,1,2), tapply(phenos, genos[,assoc[lin]], mean ), col=2, lwd=2  )
plot(genos[,assoc[not_lin]], phenos)
points( c(0,1,2), tapply(phenos, genos[,assoc[not_lin]], mean ), col=2, pch=16, cex=3 )
lines( c(0,1,2), tapply(phenos, genos[,assoc[not_lin]], mean ), col=2, lwd=2  )
N = 1000 #number of individuals
M = 30   #number of non-causal SNPs
gs = matrix(0,nrow=N,ncol=M)
MAF = .5
gC = rbinom(N,1,MAF) #causal variant
MAF = 0.5 #minor allele frequency of all SNPs
set.seed = (42) #set random seed so we all get the same numbers
#Generate 10 tight LD partners
rho = 0.9
for(i in 1:10) {
idx = rbinom(N,1,rho)
gs[,i]=gC*idx+rbinom(N,1,MAF)*(1-idx)
# test they have the right LD empirically
cat( 'Observed LD = ', cor( gs[,i], gC ), '\n' )
# Bonus: prove they have the right LD theoretically
}
#Do the same for 10 moderate LD partners (rho=0.6)
rho = 0.6
for(i in 11:20) {
idx = rbinom(N,1,rho)
gs[,i]=gC*idx+rbinom(N,1,MAF)*(1-idx)
# test they have the right LD empirically
cat( 'Observed LD = ', cor( gs[,i], gC ), '\n' )
# Bonus: prove they have the right LD theoretically
}
#Do the same for 10 independent SNPs (rho=0)
rho = 0
for(i in 21:30) {
idx = rbinom(N,1,rho)
gs[,i]=gC*idx+rbinom(N,1,MAF)*(1-idx)
# test they have the right LD empirically
cat( 'Observed LD = ', cor( gs[,i], gC ), '\n' )
# Bonus: prove they have the right LD theoretically
}
beta = 0.3
pheno = gC*beta + rnorm(N)
zsC = summary(lm(pheno~gC))$coef[2,3]
zs = sapply( 1:M, function(i) summary(lm(pheno~gs[,i]))$coef[2,3] )
#Visualize the relationship between the mean z-scores at the tag SNPs and the z-score at the causal SNP
par( mfrow=c(2,2) )
breaks = hist(c(0,zsC,zs),plot=F)$breaks
hist(zs[1:10],breaks=breaks, col=1, main='LD partners')
abline(v=zsC)
hist(zs[11:20],breaks=breaks, col=2, main='Low-LD partner SNPs')
abline(v=zsC)
hist(zs[21:30],breaks=breaks, col=3, main='Independent SNPs')
abline(v=zsC)
gs
summary(lm(pheno~gC))
summary(lm(pheno~gC))$coef[2,3]
#Visualize LD score regression
plot( ldscores, c( zsC, zs )^2, ylab=expression(chi^2) )
#Visualize LD score regression
plot( ldscores, c( zsC, zs )^2, ylab=expression(chi^2), col = c("red", "blue", "green"))
#Visualize LD score regression
plot( ldscores, c( zsC, zs )^2, ylab=expression(chi^2))
